GlobalDeclarations
{
var {:propertyMap} __dType : [int]int; //{0:generic, 1:int, 2:float}
var __oldType : int; 
var __newType : int;
procedure __nondet_havoc_repl() returns (x:int); //replacement for havoc

//making the havoc demonic, by making it part of control flow
procedure demonic_choice_type() returns (x:int)
{
    var y:int;
    havoc y;
    if (y == 0) {
        x := 0;
    }
    if (y == 1) {
        x := 1;
    }
    if (y == 2) {
        x := 2;
    }
    return;
}

//procedure boogie_si_record_i32(x:int); 

}

TemplateVariables
{
//var p : int; 
//var t: int;
//var b: int;

///// This way does not work since it matches against random procedures.
//procedure   {:#NameMatches "^ThisIsAnUpcallArg$"} upCallProc(q : int);
//procedure   {:#NameMatches "^TemplateSpecializedProc$"} templSplProc(q : int, r1:int);// returns( {:#AnyParameters} r: int);
//procedure   {:#NameMatches "^IsJSArrayType$"} isDTypeProc(q : int, r1:int, bl: int) ;//returns( {:#AnyParameters} r: int);
}

ProcedureRule
{
	procedure {:#ReplaceImplementation} ThisIsAnUpcallArg(p:int);
}
-->
{
   __oldType := __dType[p];
   //record_boogie "__oldType" __oldType
   call {:cexpr "oldDynType"} boogie_si_record_i32(__oldType);
   //havoc __newType; //need a demonic havoc
   call __newType := demonic_choice_type();
   __dType[p] := __newType;
   assume (__dType[p] == __oldType || __dType[p] == 0);
   //record_boogie "__newType" __oldType
   call {:cexpr "newDynType"} boogie_si_record_i32(__newType);
   return;
}

ProcedureRule
{
	procedure {:#ReplaceImplementation}  TemplateSpecializedProc(p:int, t:int);
}
-->
{
   call {:cexpr "dynType"} boogie_si_record_i32(__dType[p]);
   assert(__dType[p] == t);
   return;
}

ProcedureRule
{
	procedure {:#ReplaceImplementation} IsJSArrayType (p:int, t:int, b:int);
}
-->
{
   call {:cexpr "dynType"} boogie_si_record_i32(__dType[p]);
   call {:cexpr "isType"} boogie_si_record_i32(t);
   assume((b != 0) <==> (__dType[p] == t));
   return;
}

ProcedureRule
{
	procedure {:#ReplaceImplementation} ThisIsGetTypeIdProc (p:int, t:int);
}
-->
{
   call {:cexpr "dynType"} boogie_si_record_i32(__dType[p]);
   call {:cexpr "isType"} boogie_si_record_i32(t);
   assume (__dType[p] == t);
   return;
}




