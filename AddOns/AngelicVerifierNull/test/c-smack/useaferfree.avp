GlobalDeclarations
{
var {:propertyMap} validFree : [int] bool;
function {:inline} isValid(p : int, m : [int]bool) returns(bool) {m[p] || p == 0}
}


TemplateVariables
{
var p : int;
//procedure anyProc(p : int, {:#AnyParameters} a : int) returns( {:#AnyParameters} r: int);
//procedure anyProc({:#AnyParameters} q : int) returns( {:#AnyParameters} r: int);
//procedure anyProc(q : int, k:int) returns( {:#AnyParameters} r: int);
}

CmdRule
{
//call anyProc(p);
call bar(p);
}
-->
{
assert isValid(p, validFree);
#this;
}

ProcedureRule
{
procedure {:#NameMatches ".*"} fmDeleteArray( {:#AnyParameters} p1 : int) returns({:#AnyParameters} r: int);
}
-->
{
assert isValid(p1, validFree);
}

//ProcedureRule
//{
//procedure {:#NameMatches "^free_$"} fmFree( p1 : int);
//procedure {:#NoImplementation} {:#NameMatches "^_ZdlPv$"} fmDelete( p1 : int);
//procedure {:#NoImplementation} {:#NameMatches "^_ZdaPv$"} fmDeleteArray( p1 : int);
//}
//-->
//{
//validFree[p1] := false;
//}
