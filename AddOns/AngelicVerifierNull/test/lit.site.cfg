import os
import sys
import re
import platform

import lit.util
import lit.formats

lit_config.note('using Python {}'.format(sys.version))

# name: The name of this test suite.
config.name = 'AV+SMACK'

config.test_format = lit.formats.ShTest(execute_external=False)

# suffixes: A list of file extensions to treat as test files. This is overriden
# by individual lit.local.cfg files in the test subdirectories.
config.suffixes = ['.bpl']

# excludes: A list of directories to exclude from the testsuite. The 'Inputs'
# subdirectories contain auxiliary inputs for various tests in their parent
# directories.
config.excludes = []

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(os.path.abspath('__file__'))

# test_exec_root: The root path where tests should be run.
config.test_exec_root = config.test_source_root

# Propagate 'HOME' through the environment.
if 'HOME' in os.environ:
    config.environment['HOME'] = os.environ['HOME']

# Propagate 'INCLUDE' through the environment.
if 'INCLUDE' in os.environ:
    config.environment['INCLUDE'] = os.environ['INCLUDE']

# Propagate 'LIB' through the environment.
if 'LIB' in os.environ:
    config.environment['LIB'] = os.environ['LIB']

# Propagate the temp directory. Windows requires this because it uses \Windows\
# if none of these are present.
if 'TMP' in os.environ:
    config.environment['TMP'] = os.environ['TMP']
if 'TEMP' in os.environ:
    config.environment['TEMP'] = os.environ['TEMP']

# Propagate PYTHON_EXECUTABLE into the environment
config.environment['PYTHON_EXECUTABLE'] = getattr(config, 'python_executable', '')

# Check that the object root is known.
if config.test_exec_root is None:
    lit_config.fatal('Could not determine execution root for tests!')

"""
   Function for quoting filepaths
   so that if they contain spaces
   lit's shell interpreter will
   treat the path as a single argument
"""
def quotePath(path):
    if ' ' in path:
        return '"{path}"'.format(path=path)
    else:
        return path

### Add AV specific substitutions

# Find Binaries 
up = os.path.dirname
corralRoot = up(up(up(up(os.path.abspath('__file__')))))
avRoot = os.path.join(corralRoot, 'AddOns')
avnRoot = os.path.join(avRoot, 'AngelicVerifierNull')
smackInstRoot = os.path.join(avRoot, 'SmackInst')

def GetBinary(root, BinaryName):
  return os.path.join(
          os.path.join(
           os.path.join(
            os.path.join(root, BinaryName), 'bin'),'Debug'),
             BinaryName + '.exe')

avnBinary = GetBinary(avnRoot, 'AngelicVerifierNull') 
avhBinary = GetBinary(avnRoot, 'AvHarnessInstrumentation')
smackInstBinary = GetBinary(smackInstRoot, 'SmackInst')

avnBinary, avhBinary, smackInstBinary = (quotePath(b) for b in (avnBinary, avhBinary, smackInstBinary))

lit_config.note('Using AngelicVerifierNull.exe: {}\n'.format(avnBinary))
lit_config.note('Using AvHarnessInstrumentation.exe : {}\n'.format(avhBinary))
lit_config.note('Using SmackInst.exe : {}\n'.format(smackInstBinary))

if not all([os.path.exists(x) for x in [avnBinary, avhBinary, smackInstBinary]]):
  lit_config.fatal('Could not find required binaries!') 

if os.name == 'posix':
  if lit.util.which('mono') == None:
    lit_config.fatal('Cannot find mono!')
  avnBinary, avhBinary, smackInstBinary = ('mono ' + b for b in (avnBinary, avhBinary, smackInstBinary))

config.substitutions.append( ('%avn', avnBinary) )
config.substitutions.append( ('%avh', avhBinary) )
config.substitutions.append( ('%si', smackInstBinary))

# Add diff tool substitution
commonDiffFlags=' --unified=3 --strip-trailing-cr --ignore-all-space'
diffExecutable = None
if os.name == 'posix':
    diffExecutable = 'diff' + commonDiffFlags
elif os.name == 'nt':
    pydiff = quotePath( os.path.join(config.test_source_root, 'pydiff.py') )
    diffExecutable = sys.executable + ' ' + pydiff + commonDiffFlags
else:
    lit_config.fatal('Unsupported platform')
lit_config.note("Using diff tool '{}'".format(diffExecutable))

config.substitutions.append( ('%diff', diffExecutable ))

# Add grep substitution
grepBinary = None
if os.name == 'posix':
  grepBinary = 'grep AV_OUTPUT | grep -v Analyzing'
elif os.name == 'nt':
  grepBinary = 'findstr AV_OUTPUT | findstr /v Analyzing'
else:
  lit_config.fatal('Unsuported platform')
lit_config.note("Using grep tool '{}'".format(grepBinary))

config.substitutions.append( ('%grep', grepBinary ))
