GlobalDeclarations
{
var {:propertyMap} validFree : [int] bool;
function {:reachableStates} mustReach(bool) : bool;
}


TemplateVariables
{
var p : int;
}

CmdRule
{
assume {:nonnull} p != NULL;
}
-->
{
assert(validFree[p]);
#this;
}

InsertAtBeginningRule
{
procedure {:#NoImplementation} ExFreeCallBack( p1 : int);
procedure {:#NoImplementation} ExFreePool( p1 : int);
procedure {:#NoImplementation} ExFreePoolWithTag( p1 : int, p2 : int);
procedure {:#NoImplementation} RtlFreeUnicodeString( p1 : int);
procedure {:#NoImplementation} ZwFreeVirtualMemory( p1 : int, p2 : int, p3 :int, p4 : int) returns (i : int);
procedure {:#NoImplementation} AuthzBasepFreeSecurityAttributesList( p1 : int);

procedure {:#NoImplementation} {:#NameMatches "\w*[Ff]ree\w*"} fmFree( p1 : int, {:#AnyParameters} a : int) returns ( {:#AnyParameters} r : int);
procedure {:#NoImplementation} {:#NameMatches "\w*[Dd]elete\w*"} fmDelete( p1 : int, {:#AnyParameters} a : int) returns ( {:#AnyParameters} r : int);
}
-->
{
assert(validFree[p1]);
validFree[p1] := false;
}
